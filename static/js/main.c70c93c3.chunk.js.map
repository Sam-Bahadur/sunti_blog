{"version":3,"sources":["components/Blog/Blog.module.css","components/Loading/Loading.module.css","components/Body/body.module.css","components/Header/header.module.css","img/hero.JPG","img/logo.png","App.module.css","components/Loading/Loading.js","components/Blog/Blog.js","components/Body/Body.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Loading","className","style","loading_screen","loader","loader_inside","Blog","blog","blogflex","flex_blog","flex_date","Body","Style","hero_container","hero_flex","src","hero","alt","herotext","Header","headerflex","headerlogo","logo","headernav","App","state","isloading","setTimeout","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,SAAW,uBAAuB,UAAY,wBAAwB,UAAY,0B,gBCA9HD,EAAOC,QAAU,CAAC,eAAiB,gCAAgC,OAAS,wBAAwB,QAAU,2B,gBCA9GD,EAAOC,QAAU,CAAC,eAAiB,6BAA6B,UAAY,wBAAwB,SAAW,yB,gBCA/GD,EAAOC,QAAU,CAAC,WAAa,2BAA2B,WAAa,2BAA2B,UAAY,0BAA0B,YAAc,8B,oBCDtJD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,2ECC3CD,EAAOC,QAAU,CAAC,IAAM,mB,gJCET,SAASC,IACpB,OACI,yBAAKC,UAAWC,IAAMC,gBAClB,yBAAKF,UAAWC,IAAME,QAClB,yBAAKH,UAAWC,IAAMG,iBAE1B,2C,iECLG,SAASC,IACtB,OACE,yBAAKL,UAAWC,IAAMK,MACpB,yBAAKN,UAAWC,IAAMM,UACpB,yBAAKP,UAAWC,IAAMO,WACpB,mDACA,6ZAQA,+CAEF,yBAAKR,UAAWC,IAAMQ,WACpB,wCACA,uCChBK,SAASC,IACtB,OACE,oCACE,yBAAKV,UAAWW,IAAMC,gBACpB,yBAAKZ,UAAWW,IAAME,WACpB,yBAAKb,UAAU,WAAWc,IAAKC,IAAMC,IAAI,KACzC,yBAAKhB,UAAWW,IAAMM,UAAtB,yJAIE,6BACA,6CACA,iDAIN,kBAACZ,EAAD,O,qDChBS,SAASa,IACtB,OACE,yBAAKlB,UAAWW,IAAMQ,YACpB,yBAAKnB,UAAWW,IAAMS,YACpB,yBAAKN,IAAKO,IAAML,IAAI,KADtB,iBAIA,yBAAKhB,UAAWW,IAAMW,WACpB,4BACE,oCACA,wCACA,qCACA,4BACE,kBAAC,IAAD,OAEF,4BACE,kBAAC,IAAD,U,ICfSC,E,kDACnB,aAAc,IAAD,8BACX,gBACKC,MAAM,CACTC,WAAW,GAHF,E,qDAOH,IAAD,OAMP,OALAC,YAAW,WACT,EAAKC,SAAS,CACZF,WAAW,MAEZ,KAEDG,KAAKJ,MAAMC,UAAY,kBAAC1B,EAAD,MACvB,yBAAKC,UAAU,OACf,kBAACkB,EAAD,MACA,kBAACR,EAAD,W,GAlB2BmB,aCKbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c70c93c3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"blog\":\"Blog_blog__33E97\",\"blogflex\":\"Blog_blogflex__2kF1W\",\"flex_date\":\"Blog_flex_date__2bpNG\",\"flex_blog\":\"Blog_flex_blog__1pkEo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading_screen\":\"Loading_loading_screen__1sa4Z\",\"loader\":\"Loading_loader__12PWf\",\"loading\":\"Loading_loading__2pW4p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hero_container\":\"body_hero_container__3Gz8A\",\"hero_flex\":\"body_hero_flex__G0nNV\",\"herotext\":\"body_herotext__3dvg_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerflex\":\"header_headerflex__R9G37\",\"headerlogo\":\"header_headerlogo__U65ea\",\"headernav\":\"header_headernav__2Et0v\",\"navbarhover\":\"header_navbarhover__3IVYN\"};","module.exports = __webpack_public_path__ + \"static/media/hero.cd5c9d53.JPG\";","module.exports = __webpack_public_path__ + \"static/media/logo.c40babe6.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__29AqE\"};","import React from 'react'\r\nimport style from \"./Loading.module.css\"\r\n\r\nexport default function Loading() {\r\n    return (\r\n        <div className={style.loading_screen}>\r\n            <div className={style.loader}>\r\n                <div className={style.loader_inside}></div>\r\n            </div>\r\n            <h3>Loading...</h3>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport style from \"./Blog.module.css\";\r\nimport button from \"../Button/Button.module.css\"\r\n\r\nexport default function Blog() {\r\n  return (\r\n    <div className={style.blog}>\r\n      <div className={style.blogflex}>\r\n        <div className={style.flex_blog}>\r\n          <h3>The birth of Legend</h3>\r\n          <h4>\r\n            Lorem ipsum, dolor sit amet consectetur adipisicing elit. Temporibus\r\n            unde quisquam rerum ipsum dolores accusamus possimus sit, quae,\r\n            consequuntur accusantium placeat molestias autem reiciendis dicta\r\n            nemo ab dignissimos nam odio architecto amet corrupti repellendus\r\n            quibusdam! A sapiente magnam ipsam ullam consectetur autem expedita\r\n            nulla porro dolore ducimus? Dolor, debitis odio?\r\n          </h4>\r\n          <button>more blogs</button>\r\n        </div>\r\n        <div className={style.flex_date}>\r\n          <h3>november</h3>\r\n          <h4>1996</h4>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Style from \"./body.module.css\";\r\nimport hero from \"../../img/hero.JPG\";\r\nimport Blog from '../Blog/Blog';\r\n\r\n\r\nexport default function Body() {\r\n  return (\r\n    <>\r\n      <div className={Style.hero_container}>\r\n        <div className={Style.hero_flex}>\r\n          <img className=\"hero_img\" src={hero} alt=\"\" />\r\n          <div className={Style.herotext}>\r\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Quia cum\r\n            odit similique. Porro eius laudantium delectus fugit dolorum\r\n            reprehenderit pariatur?\r\n            <br></br>\r\n            <button>Read more</button>\r\n            <button>Read Blogs</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Blog />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Style from \"./header.module.css\";\r\nimport logo from \"../../img/logo.png\";\r\nimport { RiFacebookBoxFill } from \"react-icons/ri\";\r\nimport { AiFillInstagram } from \"react-icons/ai\";\r\n\r\nexport default function Header() {\r\n  return (\r\n    <div className={Style.headerflex}>\r\n      <div className={Style.headerlogo}>\r\n        <img src={logo} alt=\"\" />\r\n        Sunira Paudel\r\n      </div>\r\n      <div className={Style.headernav}>\r\n        <ul>\r\n          <li>Home</li>\r\n          <li>About Me</li>\r\n          <li>Blogs</li>\r\n          <li>\r\n            <RiFacebookBoxFill />\r\n          </li>\r\n          <li>\r\n            <AiFillInstagram />\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import Loading from \"./components/Loading/Loading\"\nimport \"./App.module.css\";\nimport Body from \"./components/Body/Body\";\nimport Header from \"./components/Header/Header\"\n\nimport React, { Component } from 'react'\n\nexport default class App extends Component {\n  constructor(){\n    super();\n    this.state={\n      isloading: true,\n    }\n  }\n  \n  render() {\n    setTimeout(() => {\n      this.setState({\n        isloading: true,\n      })\n    }, 3000);\n    return (\n      this.state.isloading ? <Loading /> :\n      <div className=\"App\">\n      <Header />\n      <Body />\n      {/* <Footer /> */}\n    </div>  \n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}